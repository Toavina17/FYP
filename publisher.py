# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import paho.mqtt.client as paho
from paho import mqtt
import board
import busio
import adafruit_tsl2591
import adafruit_mpl3115a2
import time
import RPi.GPIO as GPIO
from gpiozero import MotionSensor
import datetime
import threading
from picamera2 import Picamera2, Preview
import base64

topic = "my/home"


class SensorMonitor(QtCore.QObject):

    temperatureChanged = QtCore.pyqtSignal(float)
    pressureChanged = QtCore.pyqtSignal(float)
    altitudeChanged = QtCore.pyqtSignal(float)
    luminosityChanged = QtCore.pyqtSignal(float)
    motionChanged = QtCore.pyqtSignal(bool)
    contentChanged = QtCore.pyqtSignal(bytes)

    sendSensorValues = QtCore.pyqtSignal(dict)

    def __init__(self, parent=None):

        super().__init__(parent)

        # set up the sensors
        self.i2c = busio.I2C(board.SCL, board.SDA)
        self.altimeter_sensor = adafruit_mpl3115a2.MPL3115A2(self.i2c)
        self.altimeter_sensor.sealevel_pressure = 1022.5
        self.light_sensor = adafruit_tsl2591.TSL2591(self.i2c)
        self.pir = MotionSensor(4)
        
        self.camera = Picamera2()
        preview_config = self.camera.create_preview_configuration()
        self.camera.configure(preview_config)
        self.camera.start_preview()
        
        
        self.temperature = 0
        self.pressure = 0
        self.altitude = 0
        self.luminosity = 0
        self.motion = False
        self.content = None

        # Emit the initial values to be displayed on the GUI
        self.temperatureChanged.emit(self.temperature)
        self.pressureChanged.emit(self.pressure)
        self.altitudeChanged.emit(self.altitude)
        self.luminosityChanged.emit(self.luminosity)
        self.motionChanged.emit(self.motion)

        # self.monitor_loop()

    def monitor_loop(self):
        capture_config = self.camera.create_still_configuration()
        
        while True:
            temperature_now = round(self.altimeter_sensor.temperature, 2)
            pressure_now = round(self.altimeter_sensor.pressure, 2)
            altitude_now = round(self.altimeter_sensor.altitude, 2)
            luminosity_now = round(self.light_sensor.lux, 2)
            motion_now = self.pir.motion_detected

            # Check for significant changes and emit signals if necessary
            if abs(temperature_now - self.temperature) >= 1:
                self.temperature = temperature_now
                self.temperatureChanged.emit(self.temperature)

            if abs(pressure_now - self.pressure) >= 5:
                self.pressure = pressure_now
                self.pressureChanged.emit(self.pressure)

            if abs(altitude_now - self.altitude) >= 5:
                self.altitude = altitude_now
                self.altitudeChanged.emit(self.altitude)

            if abs(luminosity_now - self.luminosity) >= 20:
                self.luminosity = luminosity_now
                self.luminosityChanged.emit(self.luminosity)

            if motion_now != self.motion:
                self.motion = motion_now
                self.motionChanged.emit(self.motion)
                if self.motion == True:
                        # self.camera.start(show_preview=True)
                        now = datetime.datetime.now()
                        self.camera.switch_mode_and_capture_file(capture_config, str(now) + ".jpg")
                        with open("./" + str(now) + ".jpg", 'rb') as file:
                               filecontent =  file.read()
                               self.content = base64.b64encode(filecontent)
                               self.contentChanged.emit(self.content)
                                # publisher.publish(topic, content, qos=1)
                

    def process_message(self, message):
        if message == "I am new here":
            # Create a dictionary containing all sensor values
            sensor_values = {
                "temperature": self.temperature,
                "pressure": self.pressure,
                "altitude": self.altitude,
                "luminosity": self.luminosity,
                "motion": self.motion,
                "image": self.content
            }
            # Emit the signal with the sensor values
            self.sendSensorValues.emit(sensor_values)


class MqttClient(QtCore.QObject):
        
        
        connected = QtCore.pyqtSignal()
        messageReceived = QtCore.pyqtSignal(str)

        def __init__(self, parent=None):
                super().__init__(parent)
                # self.client = paho.Client(paho.CallbackAPIVersion.VERSION1)
                self.client = paho.Client(client_id=" ", userdata=None, protocol=paho.MQTTv5)
                self.client.on_connect = self.on_connect
                self.client.on_message = self.on_message
                self.client.on_publish = self.on_publish
                self.client.on_subscribe = self.on_subscribe
                # Set up the MQTT TLS and authentication
                self.client.tls_set(tls_version=mqtt.client.ssl.PROTOCOL_TLS)
                self.client.username_pw_set("home", "alohomora0-9W")

        def connect_to_broker(self):
                # Connect to broker
                self.client.connect("bbd2736b1607441ab7d079d33749ac8f.s1.eu.hivemq.cloud", 8883)
                # Subscribe to desired topic
                self.client.subscribe("my/subscribers", qos=1)
                # Start MQTT loop
                self.client.loop_start()

        def on_connect(self, client, userdata, flags, rc, properties=None):
                if rc == 0:
                        print("Connected to MQTT broker")
                else:
                        print("Failed to connect")

    # When a published message is received from the server
        def on_message(self, client, userdata, msg):
                message = msg.payload.decode()
                print(message)
                self.messageReceived.emit(message)

        def on_publish(self, client, userdata, mid, properties=None):
                print("mid: " + str(mid))

    # When you subscribe to a channel/topic
        def on_subscribe(self, client, userdata, mid, granted_qos, properties=None):
                print("Subscribed: " + str(mid))

        def publish_temperature(self, temperature):
                self.client.publish(topic, payload="Temperature: " + str(temperature), qos=1)

        def publish_pressure(self, pressure):
                self.client.publish(topic, payload="Pressure: " + str(pressure), qos=1)

        def publish_altitude(self, altitude):
                self.client.publish(topic, payload="Altitude: " + str(altitude), qos=1)

        def publish_luminosity(self, luminosity):
                self.client.publish(topic, payload="Luminosity: " + str(luminosity), qos=1)

        def publish_motion(self, motion):
                if motion:
                        self.client.publish(topic, payload="Motion detected", qos=1)
                else:
                        self.client.publish(topic, payload="No motion detected", qos=1)
                        
        def publish_image(self, image):
                self.client.publish(topic, image, qos=1)

        def publish_all(self, values):
                self.publish_temperature(values.get("temperature"))
                self.publish_pressure(values.get("pressure"))
                self.publish_altitude(values.get("altitude"))
                self.publish_luminosity(values.get("luminosity"))
                self.publish_motion(values.get("motion"))
                #self.publish_image(values.get("content"))


class Ui_Dialog(object):
       
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(370, 226)
        Dialog.setStyleSheet("QDialog {\n" "    background-color: #A1C3D1;\n" "}")
        self.title = QtWidgets.QGroupBox(Dialog)
        self.title.setGeometry(QtCore.QRect(10, 10, 179, 201))
        self.title.setStyleSheet("QGroupBox {\n" "    border: none;\n" "}\n" "\n" "QLabel {\n" "    color: black;\n" "}")
        self.title.setTitle("")
        self.title.setObjectName("title")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.title)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.title)
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.title)
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.title)
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.label_4 = QtWidgets.QLabel(self.title)
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.title)
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(250, 10, 121, 211))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("QGroupBox {\n" "    border: none;\n" "}\n" "\n" "QLabel {\n" "    background-color: #F172A1;\n" "   color: white;\n" "}")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setGeometry(QtCore.QRect(10, 10, 101, 32))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setGeometry(QtCore.QRect(10, 50, 101, 32))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(10, 90, 101, 32))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        self.label_9.setGeometry(QtCore.QRect(10, 130, 101, 32))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.groupBox)
        self.label_10.setGeometry(QtCore.QRect(10, 170, 101, 32))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Temperature (°C)"))
        self.label_2.setText(_translate("Dialog", "Pressure (HPa)"))
        self.label_3.setText(_translate("Dialog", "Altitude (m)"))
        self.label_4.setText(_translate("Dialog", "Luminosity (lux)"))
        self.label_5.setText(_translate("Dialog", "Motion"))
        #self.label_6.setText(_translate("Dialog", "0"))
        #self.label_7.setText(_translate("Dialog", "0"))
        #self.label_8.setText(_translate("Dialog", "0"))
        #self.label_9.setText(_translate("Dialog", "0"))
        self.label_10.setText(_translate("Dialog", "No"))
        

    def update_temperature(self, temperature):
        self.label_6.setText(str(temperature))

    def update_pressure(self, pressure):
        self.label_7.setText(str(pressure))

    def update_altitude(self, altitude):
        self.label_8.setText(str(altitude))

    def update_luminosity(self, luminosity):
        self.label_9.setText(str(luminosity))

    def update_motion(self, motion):
        self.label_10.setText("Yes" if motion else "No")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    
    print("Initialization")

    # Create an instance of the SensorMonitor
    sensor_monitor = SensorMonitor()
    print("Sensor monitor created")
    
    # Create MQTT client
    mqtt_thread = QtCore.QThread()
    publisher = MqttClient()
    publisher.moveToThread(mqtt_thread)
    print("MQTT Client created")

    # Connect signals emitted by SensorMonitor to slots in the GUI
    sensor_monitor.temperatureChanged.connect(ui.update_temperature)
    sensor_monitor.pressureChanged.connect(ui.update_pressure)
    sensor_monitor.altitudeChanged.connect(ui.update_altitude)
    sensor_monitor.luminosityChanged.connect(ui.update_luminosity)
    sensor_monitor.motionChanged.connect(ui.update_motion)
    print("Signals emitted by sensormonitor to slots in the GUI")

    # Connect signals emitted by SensorMonitor to slots in the MQTT protocol
    sensor_monitor.temperatureChanged.connect(publisher.publish_temperature)
    sensor_monitor.pressureChanged.connect(publisher.publish_pressure)
    sensor_monitor.altitudeChanged.connect(publisher.publish_altitude)
    sensor_monitor.luminosityChanged.connect(publisher.publish_luminosity)
    sensor_monitor.motionChanged.connect(publisher.publish_motion)
    sensor_monitor.sendSensorValues.connect(publisher.publish_all)
    sensor_monitor.contentChanged.connect(publisher.publish_image)
    print("Signals emitted by SensorMonitor to slots in the MQTT protocol")
    
    # Start the SensorMonitor in a separate thread
    monitor_thread = threading.Thread(target=sensor_monitor.monitor_loop)
    monitor_thread.daemon = True
    monitor_thread.start()


    # Connect MQTT signals
    publisher.connected.connect(mqtt_thread.quit)
    mqtt_thread.started.connect(publisher.connect_to_broker)
    publisher.messageReceived.connect(sensor_monitor.process_message)
    print("Connection to MQTT signals")

    # Start MQTT client thread
    mqtt_thread.start()

    Dialog.show()
    sys.exit(app.exec_())
