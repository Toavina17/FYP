# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import paho.mqtt.client as paho
import datetime
from paho import mqtt
import base64


class MqttClient(QtCore.QObject):
    messageReceived = QtCore.pyqtSignal(str)
    connected = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.client = paho.Client(paho.CallbackAPIVersion.VERSION1)
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.on_publish = self.on_publish
        self.client.on_subscribe = self.on_subscribe

        # Set up the MQTT TLS and authentication
        self.client.tls_set(tls_version=mqtt.client.ssl.PROTOCOL_TLS)
        self.client.username_pw_set("person", "alohomora0-9W")

    def connect_to_broker(self):
        # Connect to broker
        self.client.connect("f7c03fe012094440ae53bd3fbb2e0610.s2.eu.hivemq.cloud", 8883)
        self.client.connect("bbd2736b1607441ab7d079d33749ac8f.s1.eu.hivemq.cloud", 8883)
        # Subscribe to desired topic
        self.client.subscribe("my/home", qos=1)
        self.client.publish("my/subscribers", payload="I am new here", qos=1)
        # Start MQTT loop
        self.client.loop_start()

    def on_connect(self, client, userdata, flags, rc, properties=None):
        if rc == 0:
            print("Connected to MQTT broker")
        else:
            print("Failed to connect")

    # When a published message is received from the server
    def on_message(self, client, userdata, msg):
        message_size = len(msg.payload)
        message = msg.payload.decode()

        # Analyze data
        file_path = 'data.txt'
        with open(file_path, 'r+') as file:
            content = file.readlines()
            print(content)

            if len(content) > 0:
                try:
                    value = float(content[0].split(":")[1])  # Extract the number after the colon and convert it to an integer
                    print(value)
                    value += message_size  # Increment the value
                    print(value)
                    content[0] = f"Data received: {value}\n"  # Create the modified content
                    file.seek(0)  # Move the file pointer to the beginning of the file
                    file.writelines(content)
                except ValueError:
                    content[0] = "Invalid content"

            if "Temperature" in message or "Pressure" in message or "Altitude" in message or "Luminosity" in message or \
                    "motion" in message or "Motion" in message:
                self.messageReceived.emit(message)
                print(str(msg.payload))
            else:
                if len(content) > 0:
                    try:
                        value = int(
                            content[6].split(":")[1])  # Extract the number after the colon and convert it to an integer
                        value += 1  # Increment the value
                        content[6] = f"Image received: {value}\n"  # Create the modified content
                        file.seek(0)  # Move the file pointer to the beginning of the file
                        file.writelines(content)
                    except ValueError:
                        content[6] = "Invalid content"

                msg = str(message)
                image = msg.encode('ascii')
                now = datetime.datetime.now()
                filename = now.strftime("%m%d%Y-%H%M%S.jpg")
                f = open("./" + filename, 'wb')
                final_img = base64.b64decode(image)
                f.write(final_img)
                f.close()

    def on_publish(self, client, userdata, mid, properties=None):
        print("mid: " + str(mid))

    # When you subscribe to a channel/topic
    def on_subscribe(self, client, userdata, mid, granted_qos, properties=None):
        print("Subscribed: " + str(mid))
        print("Welcome to: my/home")


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(475, 613)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("QGraphicsView#graphicsView {\n"
"    background-color: #A1C3D1;\n"
"}\n"
"\n"
"QPushButton#pushButton {\n"
"    background-color: #E64398;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_2 {\n"
"    background-color: #E64398;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;    \n"
"}\n"
"\n"
"QPushButton#pushButton_3 {\n"
"    background-color: #E64398;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_4 {\n"
"    background-color: #E64398;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_10 {\n"
"    background-color: #E64398;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_5 {\n"
"    background-color: #F172A1;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_6 {\n"
"    background-color: #F172A1;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_7 {\n"
"    background-color: #F172A1;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_8 {\n"
"    background-color:#F172A1;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}\n"
"\n"
"QPushButton#pushButton_9 {\n"
"    background-color: #F172A1;\n"
"    border-radius: 10px;\n"
"    color: white;\n"
"    text-align: left;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(0, 0, 511, 641))
        font = QtGui.QFont()
        font.setFamily("Futura Bk BT")
        self.graphicsView.setFont(font)
        self.graphicsView.setObjectName("graphicsView")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 120, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 120, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 300, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(260, 300, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 100, 211, 171))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(50)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_5.setStyleSheet("QPushButton#pushButton_5{\n"
"    text-align: center;\n"
"}")
        self.pushButton_5.setText("")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(250, 100, 211, 171))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(50)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setText("")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(250, 290, 211, 171))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setText("")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(10, 290, 211, 171))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setText("")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(10, 480, 451, 121))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setText("")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(20, 490, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setObjectName("pushButton_10")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(0, 0, 511, 81))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setStyleSheet("QLabel#title {\n"
"    background-color: #B39BC8;\n"
"    color: white;\n"
"    text-align: center;\n"
"}")
        self.title.setObjectName("title")
        self.temperature = QtWidgets.QLCDNumber(self.centralwidget)
        self.temperature.setGeometry(QtCore.QRect(20, 170, 181, 101))
        self.temperature.setStyleSheet("QLCDNumber {\n"
"    color: white;\n"
"    border: none\n"
"}")
        self.temperature.setObjectName("temperature")
        self.pressure = QtWidgets.QLCDNumber(self.centralwidget)
        self.pressure.setGeometry(QtCore.QRect(270, 170, 181, 101))
        self.pressure.setStyleSheet("QLCDNumber {\n"
"    color: white;\n"
"    border: none\n"
"}")
        self.pressure.setObjectName("pressure")
        self.altitude = QtWidgets.QLCDNumber(self.centralwidget)
        self.altitude.setGeometry(QtCore.QRect(40, 350, 171, 101))
        self.altitude.setStyleSheet("QLCDNumber {\n"
"    color: white;\n"
"    border: none\n"
"}")
        self.altitude.setObjectName("altitude")
        self.luminosity = QtWidgets.QLCDNumber(self.centralwidget)
        self.luminosity.setGeometry(QtCore.QRect(260, 350, 191, 101))
        self.luminosity.setStyleSheet("QLCDNumber {\n"
"    color: white;\n"
"    border: none\n"
"}")
        self.luminosity.setObjectName("luminosity")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 530, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Futura Md BT")
        font.setPointSize(25)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel#label {\n"
"    color: white;\n"
"}")
        self.label.setObjectName("label")
        self.graphicsView.raise_()
        self.pushButton_8.raise_()
        self.pushButton_7.raise_()
        self.pushButton_6.raise_()
        self.pushButton_9.raise_()
        self.title.raise_()
        self.pushButton_5.raise_()
        self.pushButton.raise_()
        self.temperature.raise_()
        self.pushButton_2.raise_()
        self.pressure.raise_()
        self.pushButton_3.raise_()
        self.altitude.raise_()
        self.pushButton_4.raise_()
        self.luminosity.raise_()
        self.label.raise_()
        self.pushButton_10.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.pushButton_2, self.pushButton)
        MainWindow.setTabOrder(self.pushButton, self.pushButton_5)
        MainWindow.setTabOrder(self.pushButton_5, self.pushButton_3)
        MainWindow.setTabOrder(self.pushButton_3, self.pushButton_4)
        MainWindow.setTabOrder(self.pushButton_4, self.graphicsView)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sensor prototype"))
        self.pushButton.setText(_translate("MainWindow", " Temperature (°C)"))
        self.pushButton_2.setText(_translate("MainWindow", " Pressure (HPa)"))
        self.pushButton_3.setText(_translate("MainWindow", " Altitude (m)"))
        self.pushButton_4.setText(_translate("MainWindow", " Luminosity (lux)"))
        self.pushButton_10.setText(_translate("MainWindow", " Motion "))
        self.title.setText(_translate("MainWindow", "   Sensor Prototype for Smart Homes in the IoT"))
        # self.label.setText(_translate("MainWindow", "No motion detected"))

    def update_values(self, message):
        file_path = 'data.txt'
        with open(file_path, 'r+') as file:
            content = file.readlines()
            if "Temperature" in message:
                self.temperature.display(float(message[13:17]))
                if len(content) > 0:
                    try:
                        value = int(
                            content[1].split(":")[1])  # Extract the number after the colon and convert it to an integer
                        value += 1  # Increment the value
                        content[1] = f"Temperature change: {value}\n"  # Create the modified content
                        file.seek(0)  # Move the file pointer to the beginning of the file
                        file.writelines(content)
                    except ValueError:
                        content[1] = "Invalid content"

            elif "Pressure" in message:
                self.pressure.display(float(message[10:]))
                if len(content) > 0:
                    try:
                        value = int(
                            content[2].split(":")[1])  # Extract the number after the colon and convert it to an integer
                        value += 1  # Increment the value
                        content[2] = f"Pressure change: {value}\n"  # Create the modified content
                        file.seek(0)  # Move the file pointer to the beginning of the file
                        file.writelines(content)
                    except ValueError:
                        content[2] = "Invalid content"

            elif "Altitude" in message:
                self.altitude.display(float(message[10:]))
                if len(content) > 0:
                    try:
                        value = int(
                            content[2].split(":")[1])  # Extract the number after the colon and convert it to an integer
                        value += 1  # Increment the value
                        content[3] = f"Altitude change: {value}\n"  # Create the modified content
                        file.seek(0)  # Move the file pointer to the beginning of the file
                        file.writelines(content)
                    except ValueError:
                        content[3] = "Invalid content"

            elif "Luminosity" in message:
                self.luminosity.display(float(message[12:]))
                if len(content) > 0:
                    try:
                        value = int(
                            content[4].split(":")[1])  # Extract the number after the colon and convert it to an integer
                        value += 1  # Increment the value
                        content[4] = f"Luminosity change: {value}\n"  # Create the modified content
                        file.seek(0)  # Move the file pointer to the beginning of the file
                        file.writelines(content)
                    except ValueError:
                        content[4] = "Invalid content"

            elif "motion" in message or "Motion" in message:
                self.label.setText(str(message))
                if len(content) > 0:
                    try:
                        value = int(
                            content[5].split(":")[1])  # Extract the number after the colon and convert it to an integer
                        value += 1  # Increment the value
                        content[5] = f"Motion change: {value}\n"  # Create the modified content
                        file.seek(0)  # Move the file pointer to the beginning of the file
                        file.writelines(content)
                    except ValueError:
                        content[5] = "Invalid content"

           # elif "Motion" in message:
               # self.label.setText(str(message))
            file.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    # Create MQTT client
    mqtt_thread = QtCore.QThread()
    subscriber = MqttClient()
    subscriber.moveToThread(mqtt_thread)

    # Connect signals
    subscriber.connected.connect(mqtt_thread.quit)
    subscriber.messageReceived.connect(ui.update_values)
    mqtt_thread.started.connect(subscriber.connect_to_broker)

    # Start MQTT client thread
    mqtt_thread.start()

    sys.exit(app.exec_())
